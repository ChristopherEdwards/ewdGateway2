var fs = require('fs');

module.exports = {

  onSocketMessage: function(ewd) {
    var wsMsg = ewd.webSocketMessage;
    var type = wsMsg.type;
    var params = wsMsg.params;
    var sessid = ewd.session.$('ewd_sessid')._value;

    if (type === 'EWD.form.login') {
      console.log('login: ' + JSON.stringify(params));
      if (params.password === '') return 'You must enter a password';
	  if (params.password !== ewd.session.$('ewd_password')._value) return 'Invalid password';
	  ewd.session.setAuthenticated();
      return '';
    } 
	
	if (!ewd.session.isAuthenticated) return;

    if (type === 'getInterfaceVersion') {
	  return ewd.mumps.version();
    }
    
    if (type === 'getSessions') {
      var mySessid = ewd.session.$('ewd_sessid')._value;
      var ewdSessions = new ewd.mumps.GlobalNode("%zewdSession", ['session']);
      var data = [];
      var rowNo = -1;
      ewdSessions._forEach(function(sessid, session) {
        var appName = session.$('ewd_appName')._value;
        var expiry = session.$('ewd_sessionExpiry')._value;
        expiry = (expiry - 4070908800) * 1000;
        var expireDate = new Date(expiry);
        rowNo++;
        var currentSession = (sessid === mySessid);
        data.push({
          rowNo: rowNo, 
          sessid: sessid, 
          appName: appName, 
          expiry: expireDate.toUTCString(), 
          currentSession: currentSession
        });
      });
      return data;
    }
    
    if (type === 'getGlobals') {
      var globals = ewd.mumps.getGlobalDirectory({
        max: 100
      });
      return globals;
    }
    
    if (type === 'getGlobalSubscripts') {
      var glo = new ewd.mumps.GlobalNode(params.globalName, params.subscripts);
      var data = {
        nodeId: params.nodeId,
        globalName: params.globalName,
        subscripts: []
      }
      var rec;
      glo._forEach(function(subscript, subNode) {
        if (subNode._hasValue) {
          rec = {name: subscript, value: subNode._value, leaf: !subNode._hasProperties}
        }
        else {
          rec = {name: subscript, leaf: false}
        }
        data.subscripts.push(rec);
      });
      return data;
    }
    
    if (type === 'closeSession') {
      var sessid = params.sessid;
      var token;
      var zewdSession = new ewd.mumps.Global("%zewdSession");
      var tokens = zewdSession.$('tokens');
      var tokensBySession = zewdSession.$('tokensBySession').$(sessid);
      tokensBySession._forEach(function(token, subNode) {
        var xsessid = tokens.$(token)._value.split('~')[0];
        if (xsessid !== '') tokens[token]._delete();
      });
      tokensBySession._delete();
      zewdSession.$('session').$(sessid)._delete();
      zewdSession.$('nextPageTokens').$(sessid)._delete();
      zewdSession.$('action').$(sessid)._delete();
      zewdSession.$('jsonAccess').$(sessid)._delete();
      zewdSession.$('server').$(sessid)._delete();
      zewdSession.$('request').$(sessid)._delete();
      
      ewd.util.sendMessageToAppUsers({
        type: 'sessionDeleted', 
        content: {sessid: sessid}, 
        appName: 'ewdMonitor'
      });      
    }
    
    if (type === 'getSessionData') {
      var session = new ewd.mumps.GlobalNode('%zewdSession', ['session', params.sessid]);
      return session._getDocument();
    }
    
    if (type === 'deleteGlobalNode') {
      //console.log('**** deleteGlobalNode: ' + params.globalName + '; ' + JSON.stringify(params.subscripts));
      var node = new ewd.mumps.GlobalNode(params.globalName, params.subscripts);
      node._delete();
      return {nodeId: params.nodeId};
    }
    
    if (type === 'EWD.form.import') {
      console.log('import: ' + JSON.stringify(params));
      if (params.importPath === '') return 'You must enter a file path';
      fs.readFile(params.importPath, 'utf8', function(error, data) {
        if (error) {
          ewd.sendWebSocketMsg({
            type: 'importPathError',
            error: error
          });
        }
        else {
          var ref;
          var value;
          var globalName;
          var pieces;
          var subscripts;
          var globalNode;
          if (data.indexOf('\r\n') !== -1) {
            var lines = data.split('\r\n');
          }
          else {
            var lines = data.split('\n');
          }
          if (params.format === 'gtm') {
            for (var i = 2; i < lines.length; i = i + 2) {
              ref = lines[i];
              value = lines[i + 1];
              pieces = ref.split('(');
              globalName = pieces[0];
              if (globalName.substring(0,1) === '^') globalName = globalName.substring(1);
              if (globalName !== '') {
                subscripts = JSON.parse('[' + pieces[1].slice(0,-1) + ']');
                console.log(globalName + ' ' + JSON.stringify(subscripts));
                globalNode = new ewd.mumps.GlobalNode(globalName, subscripts);
                globalNode._value = value;
              }
            }
          }
          var globals = ewd.mumps.getGlobalDirectory({
            max: 200
          });        
          ewd.sendWebSocketMsg({
            type: 'getGlobals',
            message: globals
          });
          ewd.sendWebSocketMsg({
            type: 'importFile',
            ok: true,
            path: params.importPath
          });
        }
      });
      return '';
    }

    if (type === 'EWD.form.importJSON') {
      //console.log('importJSON: ' + JSON.stringify(params));
      if (params.globalName === '') return 'You must enter a Mumps array name';
      var str = params.globalName;
      if (str.charAt(0) === '%') str = str.substring(1);
      var regex = /[A-Za-z]/gi;
      if (str.match(regex) === null) return 'Invalid Mumps Array Name';
      var json = params.json.replace(/(\r\n|\n|\r)/gm,"");
      if (json === '') return 'You must enter a JSON document';
      //console.log('json = ' + json);
      try {
        var doc = JSON.parse(json);
      }
      catch(error) {
        return 'Invalid JSON: ' + error;
      }
      //console.log("** Global Name: " + params.globalName + ': ' + JSON.stringify(data));
      var glo = new ewd.mumps.Global(params.globalName);
      glo._setDocument(doc);
      var globals = ewd.mumps.getGlobalDirectory({
        max: 200
      });  
      ewd.sendWebSocketMsg({
        type: 'getGlobals',
        message: globals
      });
      ewd.sendWebSocketMsg({
        type: 'importFile',
        ok: true,
        path: params.importPath
      });
      return ''
    }
    
  }
};